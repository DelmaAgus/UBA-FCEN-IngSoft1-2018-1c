Object subclass: #Address	instanceVariableNames: 'id streetName streetNumber town zipCode province'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:11'!province	^province! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:08'!province: aProvince 	province := aProvince	! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:13'!zipCode	^zipCode! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:08'!zipCode: aZipCode 	zipCode := aZipCode! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetNumber: aStreetNumber 	streetNumber := aStreetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetName: aStreetName 	streetName := aStreetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetNumber	^streetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetName	^streetName ! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:07'!town: aTown 	town := aTown! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:12'!town	^town! !!Address methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/1/2016 10:06'!isAt: aStreetName	^streetName = aStreetName ! !Object subclass: #Customer	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationType: anIdentificationType 	identificationType := anIdentificationType! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationNumber: anIdentificationNumber 	identificationNumber := anIdentificationNumber! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationNumber		^identificationNumber ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationType		^identificationType ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!lastName: aLastName 	lastName := aLastName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!lastName	^lastName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!firstName		^firstName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!firstName: aName 	firstName := aName! !!Customer methodsFor: 'initialization' stamp: 'HernanWilkinson 10/28/2016 13:26'!initialize	super initialize.	addresses := OrderedCollection new.! !!Customer methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/1/2016 10:05'!addressAt: aStreetName ifNone: noneClosure 		^addresses detect: [ :anAddress | anAddress isAt: aStreetName ] ifNone: noneClosure ! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 11/1/2016 09:43'!numberOfAddresses		^addresses size! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:25'!addresses	^ addresses! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:27'!addAddress: anAddress 	addresses add: anAddress ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Customer class	instanceVariableNames: ''!!Customer class methodsFor: 'importing' stamp: 'HernanWilkinson 11/1/2016 08:39'!importCustomers	"	self importCustomers	"	| inputStream session newCustomer line |		inputStream := FileStream fileNamed: 'input.txt'.	session := DataBaseSession for: (Array 		with: (ClassMapping 			withDefaultTableNameFor: Address 			mappingAll: (Array 				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))) 		with: (ClassMapping 			withDefaultTableNameFor: Customer 			mappingAll: (Array 				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #lastName)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address)))).	session open.	session beginTransaction.	line := inputStream nextLine.	[ line notNil ] whileTrue: [ 		(line beginsWith: 'C') ifTrue: [ | customerData |			customerData := line substrings: {$,}.			newCustomer := Customer new.			newCustomer firstName: customerData second.			newCustomer lastName: customerData third.			newCustomer identificationType: customerData fourth.			newCustomer identificationNumber: customerData fourth.			session persist: newCustomer ].				(line beginsWith: 'A') ifTrue: [ | addressData newAddress |			addressData := line substrings: { $, }.			newAddress := Address new.			newAddress streetName: addressData second.			newAddress streetNumber: addressData third asInteger. 			newAddress town: addressData fourth.			newAddress zipCode: addressData fifth asInteger.			newAddress province: addressData fourth.			newCustomer addAddress: newAddress. ].						line := inputStream nextLine. ].					session commit.		session close.				inputStream close.		! !TestCase subclass: #CustomerImportTest	instanceVariableNames: 'importer testDataFactory customerSystem'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImportTest methodsFor: 'testing - customer' stamp: 'AgustinDelger 6/25/2018 14:27'!testCanNotImportCustomerRecordWithTooManyFields	self		shouldImportingCustomersFrom: testDataFactory customerRecordWithTooManyFieldsTestData		raiseErrorDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidAmountOfFieldsInCustomerRecordErrorMessage.			self assertNoCustomersWereImported ]! !!CustomerImportTest methodsFor: 'testing - customer' stamp: 'AgustinDelger 6/25/2018 14:27'!testCanNotImportCustomerRecordsWithTooFewFields	self		shouldImportingCustomersFrom: testDataFactory customerRecordWithTooFewFieldsTestData		raiseErrorDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidAmountOfFieldsInCustomerRecordErrorMessage.			self assertNoCustomersWereImported ]! !!CustomerImportTest methodsFor: 'testing - customer' stamp: 'AgustinDelger 6/25/2018 14:27'!testCanNotImportCustomerRecordWithExtraCommas	self		shouldImportingCustomersFrom: testDataFactory customerRecordWithExtraCommaTestData		raiseErrorDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidAmountOfFieldsInCustomerRecordErrorMessage.			self assertNoCustomersWereImported ]! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'AD 6/26/2018 09:22'!setUp	testDataFactory := CustomersTestDataFactory new.		customerSystem := Environment current createCustomerSystem.	customerSystem start.! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'AD 6/26/2018 09:42'!tearDown	customerSystem stop.! !!CustomerImportTest methodsFor: 'importing' stamp: 'AD 6/25/2018 22:49'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber	| customers |		customers := customerSystem		customersIdentifiedAs: anIdentifycationType		numbered: anIdentificationNumber.			self assert: customers size equals: 1.		^ customers anyOne! !!CustomerImportTest methodsFor: 'importing' stamp: 'AD 6/26/2018 10:03'!shouldImportingCustomersFrom: testData raiseErrorDo: errorBlock	| customerImporter |	customerImporter := CustomerImporter from: testData on: customerSystem.	self		should: [ customerImporter import ]		raise: Error		withExceptionDo: [ :anError | errorBlock value: anError ]! !!CustomerImportTest methodsFor: 'asserting' stamp: 'AD 6/25/2018 22:12'!assertImportedCustomersSizeIs: anAmountOfCustomers	self		assert: customerSystem amountOfCustomersImported		equals: anAmountOfCustomers! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 11:00'!assert: customer hasAddressAt: streetName number: streetNumber in: town zipCode: zipCode province: province	| address |		address := customer addressAt: streetName ifNone: [ self fail ].	self assert: address streetName equals: streetName.	self assert: address streetNumber equals: streetNumber.	self assert: address town equals: town.	self assert: address zipCode equals: zipCode.	self assert: address province equals: province.	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'AD 6/23/2018 17:09'!assertPepeSanchezWasImportedWithoutAddressesCorrectly	| customer idType idNumber |	idType := 'D'.	idNumber := '22333444'.	customer := self customerIdentifiedAs: idType numbered: idNumber.		self assert: customer isNamed: 'Pepe' lastName: 'Sanchez' identfiedAs: idType withNumber: idNumber andNumberOfAddresses: 0.! !!CustomerImportTest methodsFor: 'asserting' stamp: 'AD 6/23/2018 16:34'!assertNoAddressesWereImported	self assert: (session selectAllOfType: Address) isEmpty.! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 15:14'!assertJuanPerezWasImportedCorrectly		| customer idType idNumber |		idType := 'C'.	idNumber := '23-25666777-9'.	customer := self customerIdentifiedAs: idType numbered: idNumber.		self assert: customer isNamed: 'Juan' lastName: 'Perez' identfiedAs: idType withNumber: idNumber andNumberOfAddresses: 1.	self assert: customer hasAddressAt: 'Alem' number: 1122 in: 'CABA' zipCode: 1001 province: 'CABA'.	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'AgustinDelger 6/25/2018 09:57'!assertNoCustomersWereImported	self assertImportedCustomersSizeIs: 0.! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 15:16'!assertPepeSanchezWasImportedCorrectly	| customer idType idNumber |	idType := 'D'.	idNumber := '22333444'.	customer := self customerIdentifiedAs: idType numbered: idNumber.		self assert: customer isNamed: 'Pepe' lastName: 'Sanchez' identfiedAs: idType withNumber: idNumber andNumberOfAddresses: 2.	self assert: customer hasAddressAt: 'San Martin' number: 3322 in: 'Olivos' zipCode: 1636 province: 'BsAs'.	self assert: customer hasAddressAt: 'Maipu' number: 888 in: 'Florida' zipCode: 1122 province: 'Buenos Aires'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 10:56'!assert: customer isNamed: firstName lastName: lastName identfiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize	self assert: customer firstName equals: firstName.	self assert: customer lastName equals: lastName.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.	self assert: customer numberOfAddresses equals: addressesSize .! !!CustomerImportTest methodsFor: 'testing - general' stamp: 'AD 6/26/2018 10:03'!testCustomerImporterImportsCorrectlyValidInputData	| customerImporter |	customerImporter := CustomerImporter		from: testDataFactory validTestData		on: customerSystem.	customerImporter import.	self assertImportedCustomersSizeIs: 2.	self assertPepeSanchezWasImportedCorrectly.	self assertJuanPerezWasImportedCorrectly! !!CustomerImportTest methodsFor: 'testing - general' stamp: 'AgustinDelger 6/25/2018 14:32'!testCantImportAddressRecordWithoutImportingCustomerRecordFirst	self		shouldImportingCustomersFrom: testDataFactory addressRecordFirstTestData		raiseErrorDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter addressRecordWithoutCustomerErrorMessage.			self assertNoCustomersWereImported ]! !!CustomerImportTest methodsFor: 'testing - general' stamp: 'AgustinDelger 6/25/2018 14:27'!testCanNotImportAnEmptyRecord	self		shouldImportingCustomersFrom: testDataFactory emptyRecordTestData		raiseErrorDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter emptyRecordErrorMessage.			self assertPepeSanchezWasImportedWithoutAddressesCorrectly.			self assertImportedCustomersSizeIs: 1 ]! !!CustomerImportTest methodsFor: 'testing - general' stamp: 'AgustinDelger 6/25/2018 14:27'!testCantImportRecordWithAnInvalidType	self		shouldImportingCustomersFrom: testDataFactory invalidRecordTypeTestData		raiseErrorDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidRecordTypeErrorMessage.			self assertNoCustomersWereImported ]! !!CustomerImportTest methodsFor: 'testing - address' stamp: 'AgustinDelger 6/25/2018 14:28'!testCanNotImportAddressRecordWithTooFewFields	self		shouldImportingCustomersFrom: testDataFactory addressRecordWithTooFewFieldsTestData		raiseErrorDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidAmountOfFieldsInAddressRecordErrorMessage.			self assertPepeSanchezWasImportedWithoutAddressesCorrectly.			self assertImportedCustomersSizeIs: 1 ]! !!CustomerImportTest methodsFor: 'testing - address' stamp: 'AgustinDelger 6/25/2018 14:28'!testCanNotImportAddressRecordWithTooManyFields	self		shouldImportingCustomersFrom: testDataFactory addressRecordWithTooManyFieldsTestData		raiseErrorDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidAmountOfFieldsInAddressRecordErrorMessage.			self assertPepeSanchezWasImportedWithoutAddressesCorrectly.			self assertImportedCustomersSizeIs: 1 ]! !!CustomerImportTest methodsFor: 'testing - address' stamp: 'AgustinDelger 6/25/2018 14:28'!testCanNotImportAddressRecordWithExtraCommas	self		shouldImportingCustomersFrom: testDataFactory addressRecordWithExtraCommaTestData 		raiseErrorDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidAmountOfFieldsInAddressRecordErrorMessage.			self assertImportedCustomersSizeIs: 1.			self assertPepeSanchezWasImportedWithoutAddressesCorrectly.]! !Object subclass: #CustomerImporter	instanceVariableNames: 'inputStream record line session newCustomer'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImporter methodsFor: 'assertions' stamp: 'AgustinDelger 6/25/2018 15:04'!assertRecordHasValidType	(self isCustomerRecord or: [self isAddressRecord ]) ifFalse:[self error: self class invalidRecordTypeErrorMessage].! !!CustomerImporter methodsFor: 'assertions' stamp: 'AD 6/23/2018 17:32'!assertRecordIsNotEmpty	(record isEmpty) ifTrue:[self error: self class emptyRecordErrorMessage].! !!CustomerImporter methodsFor: 'assertions' stamp: 'AgustinDelger 6/25/2018 11:32'!assertRecordHasCorrectAmountOfFieldsForAddress	(self numberOfFieldsInRecordIs: self amountOfFieldsInAddressRecord)		ifFalse:[self error: self class invalidAmountOfFieldsInAddressRecordErrorMessage].! !!CustomerImporter methodsFor: 'assertions' stamp: 'AgustinDelger 6/25/2018 14:46'!assertACustomerHasBeenImported	newCustomer ifNil: [self error: self class addressRecordWithoutCustomerErrorMessage ]! !!CustomerImporter methodsFor: 'assertions' stamp: 'AgustinDelger 6/25/2018 11:32'!assertRecordHasCorrectAmountOfFieldsForCustomer	(self numberOfFieldsInRecordIs: self amountOfFieldsInCustomerRecord)		ifFalse:[self error: self class invalidAmountOfFieldsInCustomerRecordErrorMessage].! !!CustomerImporter methodsFor: 'initialization' stamp: 'AgustinDelger 6/25/2018 12:29'!initializeFrom: anInputStream on: aSession 	inputStream := anInputStream.	session := aSession.! !!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'AgustinDelger 6/25/2018 11:37'!numberOfFieldsInRecordIs: aNumberOfFields	^ (line occurrencesOf: self fieldsDelimiter) = (aNumberOfFields - 1) and: [ record size = aNumberOfFields ]! !!CustomerImporter methodsFor: 'importing' stamp: 'AgustinDelger 6/25/2018 14:44'!importAddress	|  newAddress |		self assertACustomerHasBeenImported.	self assertRecordHasCorrectAmountOfFieldsForAddress.		newAddress := Address new.	newAddress streetName: record second.	newAddress streetNumber: record third asInteger.	newAddress town: record fourth.	newAddress zipCode: record fifth asInteger.	newAddress := newAddress.	newAddress province: record sixth.		newCustomer addAddress: newAddress! !!CustomerImporter methodsFor: 'importing' stamp: 'AgustinDelger 6/25/2018 11:36'!readRecord	record := line substrings: {self fieldsDelimiter}! !!CustomerImporter methodsFor: 'importing' stamp: 'AgustinDelger 6/25/2018 11:36'!fieldsDelimiter	^ $,! !!CustomerImporter methodsFor: 'importing' stamp: 'AD 6/26/2018 10:00'!hasLineToImport	line := inputStream nextLine.	^ line notNil! !!CustomerImporter methodsFor: 'importing' stamp: 'AD 6/26/2018 10:06'!import	[ self hasLineToImport ]		whileTrue: [ 			self readRecord.			self importRecord ]! !!CustomerImporter methodsFor: 'importing' stamp: 'AgustinDelger 6/25/2018 14:39'!importCustomer		self assertRecordHasCorrectAmountOfFieldsForCustomer.	newCustomer := Customer new.	newCustomer firstName: record second.	newCustomer lastName: record third.	newCustomer identificationType: record fourth.	newCustomer identificationNumber: record fifth.	session persist: newCustomer.! !!CustomerImporter methodsFor: 'importing' stamp: 'AgustinDelger 6/25/2018 15:04'!isAddressRecord	^ record first = 'A'! !!CustomerImporter methodsFor: 'importing' stamp: 'AD 6/26/2018 10:06'!importRecord	self assertRecordIsNotEmpty.	self assertRecordHasValidType.	self isCustomerRecord		ifTrue: [ self importCustomer ].	^ self isAddressRecord		ifTrue: [ self importAddress ]! !!CustomerImporter methodsFor: 'importing' stamp: 'AgustinDelger 6/25/2018 11:32'!amountOfFieldsInCustomerRecord	^ 5.! !!CustomerImporter methodsFor: 'importing' stamp: 'AgustinDelger 6/25/2018 11:32'!amountOfFieldsInAddressRecord		^ 6.! !!CustomerImporter methodsFor: 'importing' stamp: 'AgustinDelger 6/25/2018 15:04'!isCustomerRecord	^ record first = 'C'! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CustomerImporter class	instanceVariableNames: ''!!CustomerImporter class methodsFor: 'instance creation' stamp: 'AgustinDelger 6/25/2018 12:30'!from: anInputStream on: aSession 	^ self new initializeFrom: anInputStream on: aSession.! !!CustomerImporter class methodsFor: 'error messages' stamp: 'AgustinDelger 6/25/2018 11:14'!invalidAmountOfFieldsInCustomerRecordErrorMessage	^ 'Invalid amount of fields in customer record'! !!CustomerImporter class methodsFor: 'error messages' stamp: 'AD 6/23/2018 17:32'!emptyRecordErrorMessage		^ 'Can not import an empty record'! !!CustomerImporter class methodsFor: 'error messages' stamp: 'AgustinDelger 6/25/2018 11:14'!invalidAmountOfFieldsInAddressRecordErrorMessage	^ 'Invalid amount of fields in address record'! !!CustomerImporter class methodsFor: 'error messages' stamp: 'AgustinDelger 6/25/2018 14:34'!addressRecordWithoutCustomerErrorMessage		^ 'An address record must be preceded by a customer record.'! !!CustomerImporter class methodsFor: 'error messages' stamp: 'AD 6/21/2018 20:28'!invalidRecordTypeErrorMessage^ 'Invalid record type'! !Object subclass: #CustomerSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerSystem methodsFor: 'queries' stamp: 'AD 6/25/2018 22:22'!customersIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber
	self subclassResponsibility! !!CustomerSystem methodsFor: 'queries' stamp: 'AD 6/25/2018 22:22'!amountOfCustomersImported
	self subclassResponsibility! !!CustomerSystem methodsFor: 'session operations' stamp: 'AD 6/25/2018 22:22'!start
	self subclassResponsibility! !!CustomerSystem methodsFor: 'session operations' stamp: 'AD 6/26/2018 09:43'!stop
	self subclassResponsibility! !!CustomerSystem methodsFor: 'persistance' stamp: 'AD 6/25/2018 22:22'!persist: aCustomer
	self subclassResponsibility! !Object subclass: #CustomersTestDataFactory	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomersTestDataFactory methodsFor: 'test data' stamp: 'AgustinDelger 6/25/2018 14:33'!addressRecordFirstTestData	^ ReadStream on:'A,San Martin,3322,Olivos,1636,BsAsC,Pepe,Sanchez,D,22333444A,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomersTestDataFactory methodsFor: 'test data' stamp: 'AgustinDelger 6/25/2018 10:45'!addressRecordWithTooFewFieldsTestData	^ ReadStream on:'C,Pepe,Sanchez,D,22333444A,San Martin'! !!CustomersTestDataFactory methodsFor: 'test data' stamp: 'AgustinDelger 6/25/2018 10:38'!validTestData	^ ReadStream on:'C,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomersTestDataFactory methodsFor: 'test data' stamp: 'AgustinDelger 6/25/2018 10:40'!invalidRecordTypeTestData	^ ReadStream on:'AX,Pepe,Sanchez,D,22333444'! !!CustomersTestDataFactory methodsFor: 'test data' stamp: 'AgustinDelger 6/25/2018 10:42'!customerRecordWithTooFewFieldsTestData	^ ReadStream on:'C,Pepe,Sanchez'! !!CustomersTestDataFactory methodsFor: 'test data' stamp: 'AgustinDelger 6/25/2018 10:43'!customerRecordWithExtraCommaTestData	^ ReadStream on:'C,Pepe,Sanchez,D,22333444,'! !!CustomersTestDataFactory methodsFor: 'test data' stamp: 'AgustinDelger 6/25/2018 11:20'!addressRecordWithExtraCommaTestData	^ ReadStream on:'C,Pepe,Sanchez,D,22333444A,San Martin,,3322,Olivos,1636,BsAs'! !!CustomersTestDataFactory methodsFor: 'test data' stamp: 'AgustinDelger 6/25/2018 10:44'!addressRecordWithTooManyFieldsTestData	^ ReadStream on:'C,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAs,Argentina'! !!CustomersTestDataFactory methodsFor: 'test data' stamp: 'AgustinDelger 6/25/2018 10:41'!emptyRecordTestData	^ ReadStream on:'C,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos Aires'! !!CustomersTestDataFactory methodsFor: 'test data' stamp: 'AgustinDelger 6/25/2018 10:42'!customerRecordWithTooManyFieldsTestData	^ ReadStream on:'C,Pepe,Sanchez,D,22333444,57kg'! !Object subclass: #Environment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Environment methodsFor: 'customer system creation' stamp: 'AD 6/25/2018 23:07'!createCustomerSystem	^ self subclassResponsibility.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Environment class	instanceVariableNames: ''!!Environment class methodsFor: 'error messages' stamp: 'AD 6/25/2018 22:59'!invalidEnvironmentErrorMessage	^ 'Invalid environment'! !!Environment class methodsFor: 'accessing' stamp: 'AD 6/25/2018 23:04'!current	^ (self subclasses detect: [:anEnvironment | anEnvironment isCurrent] ifNone: [self error: self invalidEnvironmentErrorMessage]) new.! !Environment subclass: #DevelopmentEnvironment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!DevelopmentEnvironment methodsFor: 'customer system creation' stamp: 'AD 6/25/2018 23:07'!createCustomerSystem	 	^ TransientCustomerSystem new! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DevelopmentEnvironment class	instanceVariableNames: ''!!DevelopmentEnvironment class methodsFor: 'testing' stamp: 'AD 6/25/2018 23:03'!isCurrent	^ IntegrationEnvironment isCurrent not.! !Environment subclass: #IntegrationEnvironment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!IntegrationEnvironment methodsFor: 'customer system creation' stamp: 'AD 6/25/2018 23:08'!createCustomerSystem	 	^ PersistentCustomerSystem new! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!IntegrationEnvironment class	instanceVariableNames: ''!!IntegrationEnvironment class methodsFor: 'testing' stamp: 'AD 6/26/2018 09:47'!isCurrent	^ false.! !CustomerSystem subclass: #PersistentCustomerSystem	instanceVariableNames: 'session'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!PersistentCustomerSystem methodsFor: 'session operations' stamp: 'AgustinDelger 6/25/2018 13:43'!beginTransaction	session beginTransaction.! !!PersistentCustomerSystem methodsFor: 'session operations' stamp: 'AgustinDelger 6/25/2018 14:05'!close	session close! !!PersistentCustomerSystem methodsFor: 'session operations' stamp: 'AgustinDelger 6/25/2018 14:05'!commit	session commit.! !!PersistentCustomerSystem methodsFor: 'session operations' stamp: 'AD 6/26/2018 09:19'!start	session open.	self beginTransaction.! !!PersistentCustomerSystem methodsFor: 'session operations' stamp: 'AD 6/26/2018 09:42'!stop		self commit.	self close.! !!PersistentCustomerSystem methodsFor: 'persistance' stamp: 'AgustinDelger 6/25/2018 12:39'!persist: aCustomer	session persist: aCustomer.! !!PersistentCustomerSystem methodsFor: 'mapping' stamp: 'AgustinDelger 6/25/2018 12:07'!customerMapping	^ ClassMapping		withDefaultTableNameFor: Customer		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #lastName)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!PersistentCustomerSystem methodsFor: 'mapping' stamp: 'AgustinDelger 6/25/2018 12:05'!addressMapping	^ ClassMapping		withDefaultTableNameFor: Address		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))! !!PersistentCustomerSystem methodsFor: 'initialization' stamp: 'AgustinDelger 6/25/2018 13:53'!initialize	session := DataBaseSession				 for:					(Array with:						self addressMapping with:						self customerMapping).! !!PersistentCustomerSystem methodsFor: 'queries' stamp: 'AgustinDelger 6/25/2018 13:39'!customersIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber	^ session		select: [ :aCustomer | 			aCustomer identificationType = anIdentifycationType				and: [ aCustomer identificationNumber = anIdentificationNumber ] ]		ofType: Customer! !!PersistentCustomerSystem methodsFor: 'queries' stamp: 'AgustinDelger 6/25/2018 12:20'!amountOfCustomersImported	^ (session selectAllOfType: Customer) size! !CustomerSystem subclass: #TransientCustomerSystem	instanceVariableNames: 'customers'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!TransientCustomerSystem methodsFor: 'initialization' stamp: 'AD 6/25/2018 22:29'!initialize	customers := OrderedCollection new.! !!TransientCustomerSystem methodsFor: 'queries' stamp: 'AD 6/25/2018 22:53'!customersIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber	^ customers select: [:aCustomer | aCustomer identificationType = anIdentifycationType								and: [ aCustomer identificationNumber = anIdentificationNumber ]].	! !!TransientCustomerSystem methodsFor: 'queries' stamp: 'AD 6/25/2018 22:31'!amountOfCustomersImported	^ customers size.! !!TransientCustomerSystem methodsFor: 'persistance' stamp: 'AD 6/25/2018 22:43'!persist: aCustomer	customers add: aCustomer.! !!TransientCustomerSystem methodsFor: 'session operations' stamp: 'AD 6/25/2018 22:40'!start! !!TransientCustomerSystem methodsFor: 'session operations' stamp: 'AD 6/26/2018 09:43'!stop! !