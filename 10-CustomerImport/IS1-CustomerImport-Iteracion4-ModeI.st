Object subclass: #Address	instanceVariableNames: 'id streetName streetNumber town zipCode province'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:08'!zipCode: aZipCode 	zipCode := aZipCode! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:13'!zipCode	^zipCode! !!Address methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/1/2016 10:06'!isAt: aStreetName	^streetName = aStreetName ! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:07'!town: aTown 	town := aTown! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:12'!town	^town! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:11'!province	^province! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:08'!province: aProvince 	province := aProvince	! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetNumber	^streetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetName: aStreetName 	streetName := aStreetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetName	^streetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetNumber: aStreetNumber 	streetNumber := aStreetNumber ! !TestCase subclass: #CustomerImportTest	instanceVariableNames: 'importer testDataFactory customerSystem'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImportTest methodsFor: 'importing' stamp: 'AD 6/26/2018 10:03'!shouldImportingCustomersFrom: testData raiseErrorDo: errorBlock	| customerImporter |	customerImporter := CustomerImporter from: testData on: customerSystem.	self		should: [ customerImporter import ]		raise: Error		withExceptionDo: [ :anError | errorBlock value: anError ]! !!CustomerImportTest methodsFor: 'importing' stamp: 'AgustinDelger 6/30/2018 16:28'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber	| customer |		customer := customerSystem		customerIdentifiedAs: anIdentifycationType		numbered: anIdentificationNumber		ifNone: [ self fail ].			^ customer! !!CustomerImportTest methodsFor: 'testing - customer' stamp: 'AgustinDelger 6/25/2018 14:27'!testCanNotImportCustomerRecordWithTooManyFields	self		shouldImportingCustomersFrom: testDataFactory customerRecordWithTooManyFieldsTestData		raiseErrorDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidAmountOfFieldsInCustomerRecordErrorMessage.			self assertNoCustomersWereImported ]! !!CustomerImportTest methodsFor: 'testing - customer' stamp: 'AgustinDelger 6/25/2018 14:27'!testCanNotImportCustomerRecordsWithTooFewFields	self		shouldImportingCustomersFrom: testDataFactory customerRecordWithTooFewFieldsTestData		raiseErrorDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidAmountOfFieldsInCustomerRecordErrorMessage.			self assertNoCustomersWereImported ]! !!CustomerImportTest methodsFor: 'testing - customer' stamp: 'AgustinDelger 6/25/2018 14:27'!testCanNotImportCustomerRecordWithExtraCommas	self		shouldImportingCustomersFrom: testDataFactory customerRecordWithExtraCommaTestData		raiseErrorDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidAmountOfFieldsInCustomerRecordErrorMessage.			self assertNoCustomersWereImported ]! !!CustomerImportTest methodsFor: 'testing - address' stamp: 'AgustinDelger 6/25/2018 14:28'!testCanNotImportAddressRecordWithTooFewFields	self		shouldImportingCustomersFrom: testDataFactory addressRecordWithTooFewFieldsTestData		raiseErrorDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidAmountOfFieldsInAddressRecordErrorMessage.			self assertPepeSanchezWasImportedWithoutAddressesCorrectly.			self assertImportedCustomersSizeIs: 1 ]! !!CustomerImportTest methodsFor: 'testing - address' stamp: 'AgustinDelger 6/25/2018 14:28'!testCanNotImportAddressRecordWithTooManyFields	self		shouldImportingCustomersFrom: testDataFactory addressRecordWithTooManyFieldsTestData		raiseErrorDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidAmountOfFieldsInAddressRecordErrorMessage.			self assertPepeSanchezWasImportedWithoutAddressesCorrectly.			self assertImportedCustomersSizeIs: 1 ]! !!CustomerImportTest methodsFor: 'testing - address' stamp: 'AgustinDelger 6/25/2018 14:28'!testCanNotImportAddressRecordWithExtraCommas	self		shouldImportingCustomersFrom: testDataFactory addressRecordWithExtraCommaTestData 		raiseErrorDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidAmountOfFieldsInAddressRecordErrorMessage.			self assertImportedCustomersSizeIs: 1.			self assertPepeSanchezWasImportedWithoutAddressesCorrectly.]! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 15:14'!assertJuanPerezWasImportedCorrectly		| customer idType idNumber |		idType := 'C'.	idNumber := '23-25666777-9'.	customer := self customerIdentifiedAs: idType numbered: idNumber.		self assert: customer isNamed: 'Juan' lastName: 'Perez' identfiedAs: idType withNumber: idNumber andNumberOfAddresses: 1.	self assert: customer hasAddressAt: 'Alem' number: 1122 in: 'CABA' zipCode: 1001 province: 'CABA'.	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 15:16'!assertPepeSanchezWasImportedCorrectly	| customer idType idNumber |	idType := 'D'.	idNumber := '22333444'.	customer := self customerIdentifiedAs: idType numbered: idNumber.		self assert: customer isNamed: 'Pepe' lastName: 'Sanchez' identfiedAs: idType withNumber: idNumber andNumberOfAddresses: 2.	self assert: customer hasAddressAt: 'San Martin' number: 3322 in: 'Olivos' zipCode: 1636 province: 'BsAs'.	self assert: customer hasAddressAt: 'Maipu' number: 888 in: 'Florida' zipCode: 1122 province: 'Buenos Aires'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'AD 6/23/2018 16:34'!assertNoAddressesWereImported	self assert: (session selectAllOfType: Address) isEmpty.! !!CustomerImportTest methodsFor: 'asserting' stamp: 'AD 6/23/2018 17:09'!assertPepeSanchezWasImportedWithoutAddressesCorrectly	| customer idType idNumber |	idType := 'D'.	idNumber := '22333444'.	customer := self customerIdentifiedAs: idType numbered: idNumber.		self assert: customer isNamed: 'Pepe' lastName: 'Sanchez' identfiedAs: idType withNumber: idNumber andNumberOfAddresses: 0.! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 11:00'!assert: customer hasAddressAt: streetName number: streetNumber in: town zipCode: zipCode province: province	| address |		address := customer addressAt: streetName ifNone: [ self fail ].	self assert: address streetName equals: streetName.	self assert: address streetNumber equals: streetNumber.	self assert: address town equals: town.	self assert: address zipCode equals: zipCode.	self assert: address province equals: province.	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'AgustinDelger 6/25/2018 09:57'!assertNoCustomersWereImported	self assertImportedCustomersSizeIs: 0.! !!CustomerImportTest methodsFor: 'asserting' stamp: 'AD 6/25/2018 22:12'!assertImportedCustomersSizeIs: anAmountOfCustomers	self		assert: customerSystem amountOfCustomersImported		equals: anAmountOfCustomers! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 10:56'!assert: customer isNamed: firstName lastName: lastName identfiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize	self assert: customer firstName equals: firstName.	self assert: customer lastName equals: lastName.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.	self assert: customer numberOfAddresses equals: addressesSize .! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'AD 6/26/2018 09:22'!setUp	testDataFactory := CustomersTestDataFactory new.		customerSystem := Environment current createCustomerSystem.	customerSystem start.! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'AD 6/26/2018 09:42'!tearDown	customerSystem stop.! !!CustomerImportTest methodsFor: 'testing - general' stamp: 'AgustinDelger 6/25/2018 14:27'!testCanNotImportAnEmptyRecord	self		shouldImportingCustomersFrom: testDataFactory emptyRecordTestData		raiseErrorDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter emptyRecordErrorMessage.			self assertPepeSanchezWasImportedWithoutAddressesCorrectly.			self assertImportedCustomersSizeIs: 1 ]! !!CustomerImportTest methodsFor: 'testing - general' stamp: 'AD 6/26/2018 10:03'!testCustomerImporterImportsCorrectlyValidInputData	| customerImporter |	customerImporter := CustomerImporter		from: testDataFactory validTestData		on: customerSystem.	customerImporter import.	self assertImportedCustomersSizeIs: 2.	self assertPepeSanchezWasImportedCorrectly.	self assertJuanPerezWasImportedCorrectly! !!CustomerImportTest methodsFor: 'testing - general' stamp: 'AgustinDelger 6/25/2018 14:32'!testCantImportAddressRecordWithoutImportingCustomerRecordFirst	self		shouldImportingCustomersFrom: testDataFactory addressRecordFirstTestData		raiseErrorDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter addressRecordWithoutCustomerErrorMessage.			self assertNoCustomersWereImported ]! !!CustomerImportTest methodsFor: 'testing - general' stamp: 'AgustinDelger 6/25/2018 14:27'!testCantImportRecordWithAnInvalidType	self		shouldImportingCustomersFrom: testDataFactory invalidRecordTypeTestData		raiseErrorDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidRecordTypeErrorMessage.			self assertNoCustomersWereImported ]! !Object subclass: #CustomerImporter	instanceVariableNames: 'inputStream record line newCustomer customerSystem'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImporter methodsFor: 'assertions' stamp: 'AgustinDelger 6/25/2018 11:32'!assertRecordHasCorrectAmountOfFieldsForCustomer	(self numberOfFieldsInRecordIs: self amountOfFieldsInCustomerRecord)		ifFalse:[self error: self class invalidAmountOfFieldsInCustomerRecordErrorMessage].! !!CustomerImporter methodsFor: 'assertions' stamp: 'AgustinDelger 6/27/2018 12:41'!signalRecordHasInvalidType	self error: self class invalidRecordTypeErrorMessage.! !!CustomerImporter methodsFor: 'assertions' stamp: 'AgustinDelger 6/25/2018 14:46'!assertACustomerHasBeenImported	newCustomer ifNil: [self error: self class addressRecordWithoutCustomerErrorMessage ]! !!CustomerImporter methodsFor: 'assertions' stamp: 'AgustinDelger 6/25/2018 11:32'!assertRecordHasCorrectAmountOfFieldsForAddress	(self numberOfFieldsInRecordIs: self amountOfFieldsInAddressRecord)		ifFalse:[self error: self class invalidAmountOfFieldsInAddressRecordErrorMessage].! !!CustomerImporter methodsFor: 'assertions' stamp: 'AgustinDelger 6/27/2018 12:38'!assertRecordIsNotEmpty	record isEmpty ifTrue:[self error: self class emptyRecordErrorMessage].! !!CustomerImporter methodsFor: 'initialization' stamp: 'AD 6/26/2018 10:37'!initializeFrom: anInputStream on: aCustomerSystem 	inputStream := anInputStream.	customerSystem := aCustomerSystem.! !!CustomerImporter methodsFor: 'importing' stamp: 'AgustinDelger 6/25/2018 11:32'!amountOfFieldsInAddressRecord		^ 6.! !!CustomerImporter methodsFor: 'importing' stamp: 'AgustinDelger 6/25/2018 11:36'!readRecord	record := line substrings: {self fieldsDelimiter}! !!CustomerImporter methodsFor: 'importing' stamp: 'AgustinDelger 6/25/2018 15:04'!isCustomerRecord	^ record first = 'C'! !!CustomerImporter methodsFor: 'importing' stamp: 'AD 6/26/2018 10:06'!import	[ self hasLineToImport ]		whileTrue: [ 			self readRecord.			self importRecord ]! !!CustomerImporter methodsFor: 'importing' stamp: 'AD 6/28/2018 19:27'!numberOfFieldsInRecordIs: aNumberOfFields	^ (line occurrencesOf: self fieldsDelimiter) = (aNumberOfFields - 1) and: [ record size = aNumberOfFields ]! !!CustomerImporter methodsFor: 'importing' stamp: 'AD 6/26/2018 10:00'!hasLineToImport	line := inputStream nextLine.	^ line notNil! !!CustomerImporter methodsFor: 'importing' stamp: 'AgustinDelger 6/25/2018 14:44'!importAddress	|  newAddress |		self assertACustomerHasBeenImported.	self assertRecordHasCorrectAmountOfFieldsForAddress.		newAddress := Address new.	newAddress streetName: record second.	newAddress streetNumber: record third asInteger.	newAddress town: record fourth.	newAddress zipCode: record fifth asInteger.	newAddress := newAddress.	newAddress province: record sixth.		newCustomer addAddress: newAddress! !!CustomerImporter methodsFor: 'importing' stamp: 'AgustinDelger 6/25/2018 11:32'!amountOfFieldsInCustomerRecord	^ 5.! !!CustomerImporter methodsFor: 'importing' stamp: 'AD 6/26/2018 10:37'!importCustomer		self assertRecordHasCorrectAmountOfFieldsForCustomer.	newCustomer := Customer new.	newCustomer firstName: record second.	newCustomer lastName: record third.	newCustomer identificationType: record fourth.	newCustomer identificationNumber: record fifth.	customerSystem add: newCustomer.! !!CustomerImporter methodsFor: 'importing' stamp: 'AgustinDelger 6/27/2018 12:41'!importRecord	self assertRecordIsNotEmpty.		self isCustomerRecord	ifTrue: [ ^ self importCustomer ].	self isAddressRecord	ifTrue: [ ^ self importAddress ].			self signalRecordHasInvalidType.! !!CustomerImporter methodsFor: 'importing' stamp: 'AgustinDelger 6/25/2018 15:04'!isAddressRecord	^ record first = 'A'! !!CustomerImporter methodsFor: 'importing' stamp: 'AgustinDelger 6/25/2018 11:36'!fieldsDelimiter	^ $,! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CustomerImporter class	instanceVariableNames: ''!!CustomerImporter class methodsFor: 'instance creation' stamp: 'AD 6/26/2018 10:37'!from: anInputStream on: aCustomerSystem	^ self new initializeFrom: anInputStream on: aCustomerSystem.! !!CustomerImporter class methodsFor: 'error messages' stamp: 'AgustinDelger 6/25/2018 11:14'!invalidAmountOfFieldsInCustomerRecordErrorMessage	^ 'Invalid amount of fields in customer record'! !!CustomerImporter class methodsFor: 'error messages' stamp: 'AgustinDelger 6/25/2018 14:34'!addressRecordWithoutCustomerErrorMessage		^ 'An address record must be preceded by a customer record.'! !!CustomerImporter class methodsFor: 'error messages' stamp: 'AgustinDelger 6/25/2018 11:14'!invalidAmountOfFieldsInAddressRecordErrorMessage	^ 'Invalid amount of fields in address record'! !!CustomerImporter class methodsFor: 'error messages' stamp: 'AD 6/21/2018 20:28'!invalidRecordTypeErrorMessage^ 'Invalid record type'! !!CustomerImporter class methodsFor: 'error messages' stamp: 'AD 6/23/2018 17:32'!emptyRecordErrorMessage		^ 'Can not import an empty record'! !Object subclass: #CustomerSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerSystem methodsFor: 'queries' stamp: 'AgustinDelger 6/30/2018 16:23'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ifNone: noneBlock
	self subclassResponsibility! !!CustomerSystem methodsFor: 'queries' stamp: 'AD 6/25/2018 22:22'!amountOfCustomersImported
	self subclassResponsibility! !!CustomerSystem methodsFor: 'adding' stamp: 'AD 6/26/2018 10:40'!add: aCustomer
	self subclassResponsibility! !!CustomerSystem methodsFor: 'session operations' stamp: 'AD 6/25/2018 22:22'!start
	self subclassResponsibility! !!CustomerSystem methodsFor: 'session operations' stamp: 'AD 6/26/2018 09:43'!stop
	self subclassResponsibility! !Object subclass: #CustomersTestDataFactory	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomersTestDataFactory methodsFor: 'test data' stamp: 'AgustinDelger 6/25/2018 10:44'!addressRecordWithTooManyFieldsTestData	^ ReadStream on:'C,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAs,Argentina'! !!CustomersTestDataFactory methodsFor: 'test data' stamp: 'AgustinDelger 6/25/2018 10:43'!customerRecordWithExtraCommaTestData	^ ReadStream on:'C,Pepe,Sanchez,D,22333444,'! !!CustomersTestDataFactory methodsFor: 'test data' stamp: 'AgustinDelger 6/25/2018 10:41'!emptyRecordTestData	^ ReadStream on:'C,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos Aires'! !!CustomersTestDataFactory methodsFor: 'test data' stamp: 'AgustinDelger 6/25/2018 14:33'!addressRecordFirstTestData	^ ReadStream on:'A,San Martin,3322,Olivos,1636,BsAsC,Pepe,Sanchez,D,22333444A,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomersTestDataFactory methodsFor: 'test data' stamp: 'AgustinDelger 6/25/2018 11:20'!addressRecordWithExtraCommaTestData	^ ReadStream on:'C,Pepe,Sanchez,D,22333444A,San Martin,,3322,Olivos,1636,BsAs'! !!CustomersTestDataFactory methodsFor: 'test data' stamp: 'AgustinDelger 6/25/2018 10:45'!addressRecordWithTooFewFieldsTestData	^ ReadStream on:'C,Pepe,Sanchez,D,22333444A,San Martin'! !!CustomersTestDataFactory methodsFor: 'test data' stamp: 'AgustinDelger 6/25/2018 10:40'!invalidRecordTypeTestData	^ ReadStream on:'AX,Pepe,Sanchez,D,22333444'! !!CustomersTestDataFactory methodsFor: 'test data' stamp: 'AgustinDelger 6/25/2018 10:42'!customerRecordWithTooFewFieldsTestData	^ ReadStream on:'C,Pepe,Sanchez'! !!CustomersTestDataFactory methodsFor: 'test data' stamp: 'AD 6/28/2018 19:27'!validTestData	^ ReadStream on:'C,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomersTestDataFactory methodsFor: 'test data' stamp: 'AgustinDelger 6/25/2018 10:42'!customerRecordWithTooManyFieldsTestData	^ ReadStream on:'C,Pepe,Sanchez,D,22333444,57kg'! !Object subclass: #Environment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Environment methodsFor: 'customer system creation' stamp: 'AD 6/25/2018 23:07'!createCustomerSystem	^ self subclassResponsibility.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Environment class	instanceVariableNames: ''!!Environment class methodsFor: 'accessing' stamp: 'AD 6/25/2018 23:04'!current	^ (self subclasses detect: [:anEnvironment | anEnvironment isCurrent] ifNone: [self error: self invalidEnvironmentErrorMessage]) new.! !!Environment class methodsFor: 'error messages' stamp: 'AD 6/25/2018 22:59'!invalidEnvironmentErrorMessage	^ 'Invalid environment'! !Environment subclass: #DevelopmentEnvironment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!DevelopmentEnvironment methodsFor: 'customer system creation' stamp: 'AD 6/25/2018 23:07'!createCustomerSystem	 	^ TransientCustomerSystem new! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DevelopmentEnvironment class	instanceVariableNames: ''!!DevelopmentEnvironment class methodsFor: 'testing' stamp: 'AgustinDelger 6/30/2018 16:36'!isCurrent	^ true.! !Environment subclass: #IntegrationEnvironment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!IntegrationEnvironment methodsFor: 'customer system creation' stamp: 'AD 6/25/2018 23:08'!createCustomerSystem	 	^ PersistentCustomerSystem new! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!IntegrationEnvironment class	instanceVariableNames: ''!!IntegrationEnvironment class methodsFor: 'testing' stamp: 'AgustinDelger 6/30/2018 16:31'!isCurrent	^ DevelopmentEnvironment isCurrent not.! !Object subclass: #Party	instanceVariableNames: 'identificationType identificationNumber addresses'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Party methodsFor: 'as yet unclassified' stamp: 'AgustinDelger 6/30/2018 17:38'!isIdentifiedAs: idType numbered: idNumber 		^ identificationType = idType and: [ identificationNumber = idNumber ]! !!Party methodsFor: 'as yet unclassified' stamp: 'AgustinDelger 6/30/2018 17:33'!identificationType: anIdType 		identificationType := anIdType.! !!Party methodsFor: 'as yet unclassified' stamp: 'AgustinDelger 6/30/2018 17:33'!addAddress: anAddress 		addresses add: anAddress ! !!Party methodsFor: 'as yet unclassified' stamp: 'AgustinDelger 6/30/2018 17:33'!numberOfAddresses		^ addresses size.! !!Party methodsFor: 'as yet unclassified' stamp: 'AgustinDelger 6/30/2018 17:32'!identificationNumber: anIdNumber	identificationNumber := anIdNumber ! !!Party methodsFor: 'as yet unclassified' stamp: 'AgustinDelger 6/30/2018 17:33'!addressAt: aStreetName ifNone: noneClosure 		^addresses detect: [ :anAddress | anAddress isAt: aStreetName ] ifNone: noneClosure ! !!Party methodsFor: 'as yet unclassified' stamp: 'AgustinDelger 6/30/2018 17:32'!identificationNumber	^ identificationNumber! !!Party methodsFor: 'as yet unclassified' stamp: 'AgustinDelger 6/30/2018 17:33'!identificationType	^ identificationType! !Party subclass: #Customer	instanceVariableNames: 'firstName lastName'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Customer methodsFor: 'initialization' stamp: 'HernanWilkinson 10/28/2016 13:26'!initialize	super initialize.	addresses := OrderedCollection new.! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!firstName		^firstName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!firstName: aName 	firstName := aName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!lastName: aLastName 	lastName := aLastName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!lastName	^lastName ! !CustomerSystem subclass: #PersistentCustomerSystem	instanceVariableNames: 'session'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!PersistentCustomerSystem methodsFor: 'initialization' stamp: 'AgustinDelger 6/25/2018 13:53'!initialize	session := DataBaseSession				 for:					(Array with:						self addressMapping with:						self customerMapping).! !!PersistentCustomerSystem methodsFor: 'queries' stamp: 'AgustinDelger 6/30/2018 17:43'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ifNone: noneBlock	| customerMatches |	customerMatches := session		select: [ :aCustomer | 			aCustomer isIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ]		ofType: Customer.			customerMatches isEmpty ifTrue: [ noneBlock value ].		^ customerMatches anyOne.! !!PersistentCustomerSystem methodsFor: 'queries' stamp: 'AgustinDelger 6/25/2018 12:20'!amountOfCustomersImported	^ (session selectAllOfType: Customer) size! !!PersistentCustomerSystem methodsFor: 'adding' stamp: 'AD 6/26/2018 10:38'!add: aCustomer	session persist: aCustomer.! !!PersistentCustomerSystem methodsFor: 'session operations' stamp: 'AgustinDelger 6/27/2018 12:33'!start	session open.	session beginTransaction! !!PersistentCustomerSystem methodsFor: 'session operations' stamp: 'AgustinDelger 6/27/2018 12:34'!stop	session commit.	session close! !!PersistentCustomerSystem methodsFor: 'mapping' stamp: 'AgustinDelger 6/25/2018 12:05'!addressMapping	^ ClassMapping		withDefaultTableNameFor: Address		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))! !!PersistentCustomerSystem methodsFor: 'mapping' stamp: 'AgustinDelger 6/25/2018 12:07'!customerMapping	^ ClassMapping		withDefaultTableNameFor: Customer		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #lastName)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !Party subclass: #Supplier	instanceVariableNames: 'fullName customers'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Supplier methodsFor: 'as yet unclassified' stamp: 'AD 6/28/2018 20:46'!fullName	^ fullName! !!Supplier methodsFor: 'as yet unclassified' stamp: 'AgustinDelger 6/30/2018 15:50'!addCustomer: aCustomer 		customers add: aCustomer.! !!Supplier methodsFor: 'as yet unclassified' stamp: 'AD 6/28/2018 20:27'!fullName: aName 		fullName := aName! !!Supplier methodsFor: 'as yet unclassified' stamp: 'AgustinDelger 6/30/2018 17:34'!customerIdentifiedAs: idType numbered: idNumber ifNone: noneBlock 		^ customers detect: [ :aCustomer | aCustomer isIdentifiedAs: idType numbered: idNumber ] ifNone: noneBlock ! !!Supplier methodsFor: 'as yet unclassified' stamp: 'AD 6/28/2018 20:46'!numberOfCustomers		^ customers size.! !!Supplier methodsFor: 'initialization' stamp: 'AD 6/28/2018 20:47'!initialize	addresses := OrderedCollection new.	customers := OrderedCollection new.! !TestCase subclass: #SupplierImportTest	instanceVariableNames: 'supplierSystem customerSystem'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!SupplierImportTest methodsFor: 'test data' stamp: 'AgustinDelger 6/30/2018 17:07'!validTestDataForSupplierWithAnAddressesRecord	^ ReadStream on: 'S,Supplier1,D,123A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos Aires'! !!SupplierImportTest methodsFor: 'test data' stamp: 'AgustinDelger 6/30/2018 17:16'!validTestDataForSupplierWithANewCustomerRecord	^ ReadStream on: 'S,Supplier1,D,123NC,Pepe,Sanchez,D,22333444'! !!SupplierImportTest methodsFor: 'test data' stamp: 'AD 6/28/2018 19:50'!invalidRecordTypeTestData	^ ReadStream on: 'SX,Supplier1,D,123'! !!SupplierImportTest methodsFor: 'test data' stamp: 'AgustinDelger 6/30/2018 17:17'!validTestDataForSupplierWithAnExistingCustomerRecord	^ ReadStream on: 'S,Supplier1,D,123EC,D,22333444'! !!SupplierImportTest methodsFor: 'importing' stamp: 'AgustinDelger 6/30/2018 17:02'!importSuppliersFrom: testData	| supplierImporter |		supplierImporter := SupplierImporter		from: testData		on: supplierSystem		withCustomersIn: customerSystem.	supplierImporter import! !!SupplierImportTest methodsFor: 'importing' stamp: 'AD 6/28/2018 19:53'!shouldImportingSuppliersFrom: testData raiseErrorDo: errorBlock 	| supplierImporter |	supplierImporter := SupplierImporter from: testData on: supplierSystem withCustomersIn: customerSystem.	self		should: [ supplierImporter import ]		raise: Error		withExceptionDo: [ :anError | errorBlock value: anError ]! !!SupplierImportTest methodsFor: 'initialization' stamp: 'AD 6/28/2018 20:00'!setUp	supplierSystem := TransientSupplierSystem new.	customerSystem := Environment current createCustomerSystem.! !!SupplierImportTest methodsFor: 'tests' stamp: 'AgustinDelger 6/30/2018 17:28'!testCantImportExistingCustomerRecordIfCustomerDoesNotExist	"The existing customer imported is not added to the customer system first"	self		shouldImportingSuppliersFrom: self validTestDataForSupplierWithAnExistingCustomerRecord		raiseErrorDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter customerDoesNotExistErrorMessage.			self assertImportedSuppliersSizeIs: 1.			self assertSupplier1WasImportedWithNoCustomersOrAddresses ]! !!SupplierImportTest methodsFor: 'tests' stamp: 'AD 6/28/2018 19:36'!testCantImportRecordWithAnInvalidType	self		shouldImportingSuppliersFrom: self invalidRecordTypeTestData		raiseErrorDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidRecordTypeErrorMessage.			self assertNoSuppliersWereImported ]! !!SupplierImportTest methodsFor: 'tests' stamp: 'AgustinDelger 6/30/2018 17:17'!testSupplierImporterImportsCorrectlySupplierWithExistingCustomersOnly		self addPepeSanchezToCustomerSystem.		self importSuppliersFrom:  self validTestDataForSupplierWithAnExistingCustomerRecord.		self assertImportedSuppliersSizeIs: 1.	self assertSupplier1WasImportedCorrectlyWithPepeSanchezAsCustomer! !!SupplierImportTest methodsFor: 'tests' stamp: 'AgustinDelger 6/30/2018 17:07'!testSupplierImporterImportsCorrectlySupplierWithAddressesOnly	self importSuppliersFrom: self validTestDataForSupplierWithAnAddressesRecord.		self assertImportedSuppliersSizeIs: 1.	self assertSupplier1WasImportedCorrectlyWithAddressesOnly! !!SupplierImportTest methodsFor: 'tests' stamp: 'AgustinDelger 6/30/2018 17:29'!testSupplierImporterImportsCorrectlySupplierWithNewCustomersOnly	self importSuppliersFrom: self validTestDataForSupplierWithANewCustomerRecord.		self assertImportedSuppliersSizeIs: 1.	self assertSupplier1WasImportedCorrectlyWithPepeSanchezAsCustomer.	self assertPepeSanchezWasAddedToCustomerSystem! !!SupplierImportTest methodsFor: 'tests' stamp: 'AgustinDelger 6/30/2018 18:22'!testCantImportNewCustomerRecordIfCustomerAlreadyExists		self addPepeSanchezToCustomerSystem.	self		shouldImportingSuppliersFrom: self validTestDataForSupplierWithANewCustomerRecord		raiseErrorDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter customerAlreadyExistsErrorMessage.			self assertImportedSuppliersSizeIs: 1.			self assertSupplier1WasImportedWithNoCustomersOrAddresses ]! !!SupplierImportTest methodsFor: 'assertions' stamp: 'AgustinDelger 6/30/2018 17:25'!assertSupplier1WasImportedWithNoCustomersOrAddresses	| supplier idType idNumber |	idType := 'D'.	idNumber := '123'.	supplier := self supplierIdentifiedAs: idType numbered: idNumber.	self		assert: supplier		isNamed: 'Supplier1'		identfiedAs: idType		withNumber: idNumber		numberOfCustomers: 0		andNumberOfAddresses: 0! !!SupplierImportTest methodsFor: 'assertions' stamp: 'AgustinDelger 6/30/2018 17:21'!assertPepeSanchezWasAddedToCustomerSystem	| customer idType idNumber |	idType := 'D'.	idNumber := '22333444'.	customer := self customerIdentifiedAs: idType numbered: idNumber.		self assert: customer isNamed: 'Pepe' lastName: 'Sanchez' identfiedAs: idType withNumber: idNumber andNumberOfAddresses: 0.		! !!SupplierImportTest methodsFor: 'assertions' stamp: 'AgustinDelger 6/30/2018 17:25'!assertSupplier1WasImportedCorrectlyWithAddressesOnly	| supplier idType idNumber |	idType := 'D'.	idNumber := '123'.	supplier := self supplierIdentifiedAs: idType numbered: idNumber.	self		assert: supplier		isNamed: 'Supplier1'		identfiedAs: idType		withNumber: idNumber		numberOfCustomers: 0		andNumberOfAddresses: 2.	self		assert: supplier		hasAddressAt: 'San Martin'		number: 3322		in: 'Olivos'		zipCode: 1636		province: 'BsAs'.	self		assert: supplier		hasAddressAt: 'Maipu'		number: 888		in: 'Florida'		zipCode: 1122		province: 'Buenos Aires'! !!SupplierImportTest methodsFor: 'assertions' stamp: 'AD 6/28/2018 20:32'!assertImportedSuppliersSizeIs: anAmountOfSuppliers 		self assert: supplierSystem amountOfSuppliersImported equals: anAmountOfSuppliers.! !!SupplierImportTest methodsFor: 'assertions' stamp: 'AgustinDelger 6/30/2018 16:39'!assert: supplier hasCustomerNamed: firstName lastName: lastName identfiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize	| customer |		customer := supplier		customerIdentifiedAs: idType		numbered: idNumber		ifNone: [ self fail ].			self assert: customer isNamed: firstName lastName: lastName identfiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize.! !!SupplierImportTest methodsFor: 'assertions' stamp: 'AD 6/28/2018 20:45'!assert: aSupplier isNamed: aName identfiedAs: idType withNumber: idNumber numberOfCustomers: customersSize andNumberOfAddresses: addressesSize 	self assert: aSupplier fullName equals: aName.	self assert: aSupplier identificationType equals: idType.	self assert: aSupplier identificationNumber equals: idNumber.	self assert: aSupplier numberOfCustomers equals: customersSize.	self assert: aSupplier numberOfAddresses equals: addressesSize.! !!SupplierImportTest methodsFor: 'assertions' stamp: 'AgustinDelger 6/30/2018 17:25'!assertSupplier1WasImportedCorrectlyWithPepeSanchezAsCustomer	| supplier idType idNumber |	idType := 'D'.	idNumber := '123'.	supplier := self supplierIdentifiedAs: idType numbered: idNumber.	self		assert: supplier		isNamed: 'Supplier1'		identfiedAs: idType		withNumber: idNumber		numberOfCustomers: 1		andNumberOfAddresses: 0.	self		assert: supplier		hasCustomerNamed: 'Pepe'		lastName: 'Sanchez'		identfiedAs: 'D'		withNumber: '22333444'		andNumberOfAddresses: 0! !!SupplierImportTest methodsFor: 'assertions' stamp: 'AgustinDelger 6/30/2018 16:10'!assert: customer isNamed: firstName lastName: lastName identfiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize	self assert: customer firstName equals: firstName.	self assert: customer lastName equals: lastName.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.	self assert: customer numberOfAddresses equals: addressesSize .! !!SupplierImportTest methodsFor: 'assertions' stamp: 'AD 6/28/2018 20:49'!assert: supplier hasAddressAt: streetName number: streetNumber in: town zipCode: zipCode province: province	| address |		address := supplier addressAt: streetName ifNone: [ self fail ].	self assert: address streetName equals: streetName.	self assert: address streetNumber equals: streetNumber.	self assert: address town equals: town.	self assert: address zipCode equals: zipCode.	self assert: address province equals: province.! !!SupplierImportTest methodsFor: 'assertions' stamp: 'AgustinDelger 6/30/2018 17:22'!assertNoSuppliersWereImported	self assertImportedSuppliersSizeIs: 0.! !!SupplierImportTest methodsFor: 'support' stamp: 'AgustinDelger 6/30/2018 17:23'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber	^ customerSystem		customerIdentifiedAs: anIdentifycationType		numbered: anIdentificationNumber		ifNone: [ self fail ].! !!SupplierImportTest methodsFor: 'support' stamp: 'AgustinDelger 6/30/2018 16:56'!addPepeSanchezToCustomerSystem	| customer |		customer := Customer new.	customer firstName: 'Pepe'.	customer lastName: 'Sanchez'.	customer identificationType: 'D'.	customer identificationNumber: '22333444'.	customerSystem add: customer! !!SupplierImportTest methodsFor: 'support' stamp: 'AgustinDelger 6/30/2018 17:26'!supplierIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber	^ supplierSystem		supplierIdentifiedAs: anIdentifycationType		numbered: anIdentificationNumber		ifNone: [ self fail ]! !Object subclass: #SupplierImporter	instanceVariableNames: 'inputStream record line customerSystem supplierSystem newSupplier'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!SupplierImporter methodsFor: 'assertions' stamp: 'AgustinDelger 6/30/2018 18:31'!assertCustomerDoesNotExistAlready		customerSystem customerIdentifiedAs: record fourth numbered: record fifth ifNone: [ ^ self ].		self signalCustomerAlreadyExists. ! !!SupplierImporter methodsFor: 'assertions' stamp: 'AD 6/28/2018 19:46'!assertRecordHasCorrectAmountOfFieldsForNewCustomer	(self numberOfFieldsInRecordIs: self amountOfFieldsInNewCustomerRecord)		ifFalse:[self error: self class invalidAmountOfFieldsInNewCustomerRecordErrorMessage].! !!SupplierImporter methodsFor: 'assertions' stamp: 'AD 6/28/2018 19:34'!signalRecordHasInvalidType	self error: self class invalidRecordTypeErrorMessage.! !!SupplierImporter methodsFor: 'assertions' stamp: 'AD 6/28/2018 19:34'!assertRecordIsNotEmpty	record isEmpty ifTrue:[self error: self class emptyRecordErrorMessage].! !!SupplierImporter methodsFor: 'assertions' stamp: 'AD 6/28/2018 19:34'!assertRecordHasCorrectAmountOfFieldsForAddress	(self numberOfFieldsInRecordIs: self amountOfFieldsInAddressRecord)		ifFalse:[self error: self class invalidAmountOfFieldsInAddressRecordErrorMessage].! !!SupplierImporter methodsFor: 'assertions' stamp: 'AD 6/28/2018 20:26'!assertRecordHasCorrectAmountOfFieldsForSupplier	(self numberOfFieldsInRecordIs: self amountOfFieldsSupplierRecord)		ifFalse:[self error: self class invalidAmountOfFieldsInSupplierRecordErrorMessage].! !!SupplierImporter methodsFor: 'importing' stamp: 'AgustinDelger 6/30/2018 17:56'!importNewCustomer			| newCustomer |		self assertRecordHasCorrectAmountOfFieldsForNewCustomer.	self assertCustomerDoesNotExistAlready.		newCustomer := Customer new.	newCustomer firstName: record second.	newCustomer lastName: record third.	newCustomer identificationType: record fourth.	newCustomer identificationNumber: record fifth.		customerSystem add: newCustomer.		newSupplier addCustomer: newCustomer.! !!SupplierImporter methodsFor: 'importing' stamp: 'AgustinDelger 6/30/2018 16:48'!importExistingCustomer	| customerIdType customerIdNumber newCustomer |	customerIdType := record second.	customerIdNumber := record third.	newCustomer := customerSystem		customerIdentifiedAs: customerIdType		numbered: customerIdNumber		ifNone: [ self signalCustomerDoesNotExistError ].			newSupplier addCustomer: newCustomer.! !!SupplierImporter methodsFor: 'importing' stamp: 'AD 6/28/2018 19:34'!amountOfFieldsInAddressRecord		^ 6.! !!SupplierImporter methodsFor: 'importing' stamp: 'AD 6/28/2018 20:23'!isSupplierRecord	^ record first = 'S'! !!SupplierImporter methodsFor: 'importing' stamp: 'AD 6/28/2018 19:34'!readRecord	record := line substrings: {self fieldsDelimiter}! !!SupplierImporter methodsFor: 'importing' stamp: 'AD 6/28/2018 19:42'!isNewCustomerRecord	^ record first = 'NC'! !!SupplierImporter methodsFor: 'importing' stamp: 'AD 6/28/2018 19:34'!numberOfFieldsInRecordIs: aNumberOfFields	^ (line occurrencesOf: self fieldsDelimiter) = (aNumberOfFields - 1) and: [ record size = aNumberOfFields ]! !!SupplierImporter methodsFor: 'importing' stamp: 'AD 6/28/2018 20:25'!importSupplier	self assertRecordHasCorrectAmountOfFieldsForSupplier.	newSupplier := Supplier new.	newSupplier fullName: record second.	newSupplier identificationType: record third.	newSupplier identificationNumber: record fourth.		supplierSystem add: newSupplier.! !!SupplierImporter methodsFor: 'importing' stamp: 'AgustinDelger 6/30/2018 16:18'!isExistingCustomerRecord		^ record first = 'EC'! !!SupplierImporter methodsFor: 'importing' stamp: 'AgustinDelger 6/30/2018 18:31'!import	[ self hasLineToImport ]		whileTrue: [ 			self readRecord.			self importRecord ]! !!SupplierImporter methodsFor: 'importing' stamp: 'AgustinDelger 6/30/2018 18:21'!hasLineToImport		line := inputStream nextLine.	^ line notNil! !!SupplierImporter methodsFor: 'importing' stamp: 'AD 6/28/2018 20:30'!importAddress	|  newAddress |			self assertRecordHasCorrectAmountOfFieldsForAddress.		newAddress := Address new.	newAddress streetName: record second.	newAddress streetNumber: record third asInteger.	newAddress town: record fourth.	newAddress zipCode: record fifth asInteger.	newAddress := newAddress.	newAddress province: record sixth.		newSupplier addAddress: newAddress! !!SupplierImporter methodsFor: 'importing' stamp: 'AD 6/28/2018 20:27'!amountOfFieldsSupplierRecord		^ 4! !!SupplierImporter methodsFor: 'importing' stamp: 'AgustinDelger 6/30/2018 16:17'!importRecord	self assertRecordIsNotEmpty.		self isSupplierRecord	ifTrue: [ ^ self importSupplier ].	self isNewCustomerRecord	ifTrue: [ ^ self importNewCustomer ].	self isExistingCustomerRecord	ifTrue: [ ^ self importExistingCustomer ].	self isAddressRecord	ifTrue: [ ^ self importAddress ].			self signalRecordHasInvalidType.! !!SupplierImporter methodsFor: 'importing' stamp: 'AD 6/28/2018 19:34'!isAddressRecord	^ record first = 'A'! !!SupplierImporter methodsFor: 'importing' stamp: 'AD 6/28/2018 19:34'!fieldsDelimiter	^ $,! !!SupplierImporter methodsFor: 'importing' stamp: 'AD 6/28/2018 19:37'!amountOfFieldsInNewCustomerRecord	^ 5.! !!SupplierImporter methodsFor: 'initialization' stamp: 'AD 6/28/2018 19:56'!initializeFrom: anInputStream on: aSupplierSystem withCustomersIn: aCustomerSystem	inputStream := anInputStream.	supplierSystem := aSupplierSystem.	customerSystem := aCustomerSystem.! !!SupplierImporter methodsFor: 'error signalling' stamp: 'AgustinDelger 6/30/2018 18:03'!signalCustomerAlreadyExists		self error: self class customerAlreadyExistsErrorMessage.! !!SupplierImporter methodsFor: 'error signalling' stamp: 'AgustinDelger 6/30/2018 16:43'!signalCustomerDoesNotExistError		self error: self class customerDoesNotExistErrorMessage.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SupplierImporter class	instanceVariableNames: ''!!SupplierImporter class methodsFor: 'instance creation' stamp: 'AD 6/28/2018 19:55'!from: inputStream on: aSupplierSystem withCustomersIn: aCustomerSystem 	^ self new initializeFrom: inputStream on: aSupplierSystem withCustomersIn: aCustomerSystem.! !!SupplierImporter class methodsFor: 'error messages' stamp: 'AD 6/28/2018 19:46'!invalidAmountOfFieldsInNewCustomerRecordErrorMessage	^ 'Invalid amount of fields in new customer record'! !!SupplierImporter class methodsFor: 'error messages' stamp: 'AD 6/28/2018 19:34'!invalidAmountOfFieldsInAddressRecordErrorMessage	^ 'Invalid amount of fields in address record'! !!SupplierImporter class methodsFor: 'error messages' stamp: 'AgustinDelger 6/30/2018 16:45'!customerDoesNotExistErrorMessage		^ 'Existing customer could not be found'! !!SupplierImporter class methodsFor: 'error messages' stamp: 'AD 6/28/2018 19:45'!addressRecordWithoutSupplierErrorMessage		^ 'An address record must be preceded by a supplier record.'! !!SupplierImporter class methodsFor: 'error messages' stamp: 'AgustinDelger 6/30/2018 18:03'!customerAlreadyExistsErrorMessage		^ 'Customer already exists.'! !!SupplierImporter class methodsFor: 'error messages' stamp: 'AD 6/28/2018 19:34'!invalidRecordTypeErrorMessage^ 'Invalid record type'! !!SupplierImporter class methodsFor: 'error messages' stamp: 'AD 6/28/2018 19:34'!emptyRecordErrorMessage		^ 'Can not import an empty record'! !CustomerSystem subclass: #TransientCustomerSystem	instanceVariableNames: 'customers'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!TransientCustomerSystem methodsFor: 'queries' stamp: 'AgustinDelger 6/30/2018 17:42'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ifNone: noneBlock		^ customers detect: [:aCustomer | aCustomer isIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ] ifNone: [noneBlock value].	! !!TransientCustomerSystem methodsFor: 'queries' stamp: 'AD 6/25/2018 22:31'!amountOfCustomersImported	^ customers size.! !!TransientCustomerSystem methodsFor: 'adding' stamp: 'AD 6/26/2018 10:38'!add: aCustomer	customers add: aCustomer.! !!TransientCustomerSystem methodsFor: 'initialization' stamp: 'AD 6/25/2018 22:29'!initialize	customers := OrderedCollection new.! !!TransientCustomerSystem methodsFor: 'session operations' stamp: 'AD 6/25/2018 22:40'!start! !!TransientCustomerSystem methodsFor: 'session operations' stamp: 'AD 6/26/2018 09:43'!stop! !Object subclass: #TransientSupplierSystem	instanceVariableNames: 'suppliers'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!TransientSupplierSystem methodsFor: 'importing' stamp: 'AgustinDelger 6/30/2018 17:41'!supplierIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ifNone: noneBlock	^ suppliers detect: [:aSupplier | aSupplier isIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ] ifNone: [noneBlock value].! !!TransientSupplierSystem methodsFor: 'initialization' stamp: 'AD 6/28/2018 20:03'!initialize		suppliers := OrderedCollection new.! !!TransientSupplierSystem methodsFor: 'as yet unclassified' stamp: 'AD 6/28/2018 20:02'!amountOfSuppliersImported	^ suppliers size.! !!TransientSupplierSystem methodsFor: 'as yet unclassified' stamp: 'AD 6/28/2018 20:29'!add: aSupplier 		suppliers add: aSupplier! !